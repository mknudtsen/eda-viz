{
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(GGally)\nlibrary(tableplot)\n\noptions(shiny.maxRequestSize = 25*1024^2)\noptions(shiny.trace = TRUE)\n\nr_data <<- list()\nr_data <- reactiveValues()\n\nshinyServer(function(input, output) {\n\n    #filedata <- reactive({\n    #    infile <- input$uploadfile\n    #    if (is.null(infile)) return()\n    #    read.csv(infile$datapath, header = input$header, sep = input$sep)\n    #})\n    \n    \n\n############### NEW -- Adapted from Radiant -- #####################\n        \n    output$ui_file_upload <- renderUI({\n        \n        if (is.null(input$data_type)) return()\n        if (input$data_type == \"csv\") {\n            fileInput('uploadfile', '', multiple = FALSE,\n                      accept =c('text/csv', 'text/comma-separated-values',\n                                'text/tab-separated-values', \n                                'text/plain', '.csv', '.tsv'))\n        } else if (input$data_type == \"rda\") {\n            fileInput('uploadfile', '', multiple = FALSE,\n                      accept = c('.rda', '.rds', '.rdata'))\n        }\n    }) \n    \n    output$ui_load <- renderUI({\n        list(\n          #wellPanel(\n            \n            radioButtons(inputId = \"data_type\", label = \"Load data\",\n                         c(\"rda\" = \"rda\", \"csv\" = \"csv\"),\n                         selected = \"rda\", inline = TRUE),\n            conditionalPanel(condition = \"input.data_type == 'csv'\",\n              with(tags, table(td(checkboxInput('header', 'Header', TRUE)),\n                               td(HTML(\"&nbsp;&nbsp\")),\n                               td(checkboxInput('str_as_factor', 'Factorize', TRUE)))),\n              radioButtons('sep', 'Separator', c(Comma = ',', Semicolon = ';', Tab = '\\t'),\n                           ',', inline = FALSE)\n            ),\n            uiOutput(\"ui_file_upload\")\n          #)\n        )\n    })\n    \n    observe({\n        in_file <- input$uploadfile\n        if (!is.null(in_file)) {\n          isolate({\n            loadData(in_file$name, in_file$datapath,\n                     input$data_type, \n                     header = input$header,\n                     str_as_factor = input$str_as_factor,\n                     sep = input$sep)\n          })\n        }\n    })\n    \n    loadData <- function(fname, ufile, ext,\n                         header = TRUE, \n                         str_as_factor = TRUE,\n                         sep = \",\") {\n    \n      filename <- basename(fname)\n      objname <- sub(paste0(\".\", ext, \"$\"), \"\", filename)\n      \n      if (ext == 'rda') {\n        robjname <- try(load(ufile), silent = FALSE)\n        r_data[[objname]] <- as.data.frame(get(robjname))\n      } \n      \n      if (ext == 'csv') {\n          r_data[[objname]] <- try(read_delim(ufile, sep, col_names = header), silent = TRUE) %>%\n          {if (is(., 'try-error'))\n            try(read.table(ufile, header = header, sep = sep, stringsAsFactors = FALSE), silent = TRUE)\n           else . } %>% as.data.frame\n      }\n      \n      r_data[['datasetlist']] <- c(objname, r_data[['datasetlist']]) %>% unique \n    }\n    \n    \n    \n    .getdata <- reactive({\n        if (is.null(input$dataset)) return()\n        r_data[[input$dataset]]\n    })\n    \n    .getclass <- reactive({\n        head(r_data[[input$dataset]]) %>% getclass\n    })\n    \n    varnames <- reactive({\n        .getclass() %>%\n          set_names(., paste0(., \" {\", .getclass(), \"}\"))\n    })\n    \n    getclass <- function(dat) {\n        sapply(dat, function(x) class(x)[1]) %>%\n          sub(\"ordered\", \"factor\", .) %>%\n          sub(\"POSIXct\", \"date\", .) %>%\n          sub(\"POSIXlt\", \"date\", .) %>%\n          sub(\"Date\", \"date\", .) \n    }\n    \n    output$ui_datasets <- renderUI({\n        # Drop-down selection of data set\n        tagList(\n            selectInput(inputId = \"dataset\", label = \"Datasets\",\n                        choices = r_data$datasetlist,\n                        selected = \"\", multiple = FALSE)\n        )\n    })\n    \n############### NEW -- Adapted from Radiant -- #####################\n    \n    output$varlist_load <- renderUI({\n        #df <- filedata()\n        #if (is.null(df)) return(NULL)\n        #items <- names(df)\n        #names(items) <- items\n        df <- .getdata()\n        items <- names(df)\n        names(items) <- items\n        checkboxGroupInput(inputId = \"varlist\",\n                           label = \"Variables\", \n                           choices = items, \n                           selected = items)\n    })\n    \n    output$varlist_select <- renderUI({\n        df <- filedata()\n        if (is.null(df)) return()\n        # Limit df to 'varlist' from load\n        df <- df[, input$varlist]\n        # Retrieve variable options from column names\n        items <- names(df)\n        names(items) <- items\n        # UI select dropdown for variable selection\n        selectInput(inputId = 'var_select',\n                    label = 'Variable',\n                    choices = items,\n                    selected = NULL)\n    })\n    \n    output$contents <- renderTable({\n        df <- .getdata()\n        if (is.null(df)) return(NULL)\n        return(df[, input$varlist])\n    })\n    \n    output$summary <- renderPrint({\n        df <- filedata()\n        if (is.null(df)) return(NULL)\n        summary(df[, input$varlist])\n    })\n    \n    output$plot <- renderPlot({\n        df <- filedata()\n        if (is.null(df)) return(NULL)\n        df <- df[, input$varlist]\n        ggpairs(df[, sapply(df, is.integer) | sapply(df, is.numeric)])    \n    })\n    \n    output$histogram <- renderPlot({\n        df <- filedata()\n        if (is.null(df)) return(NULL)\n        hist(df[, input$var_select], \n             probability = TRUE, \n             breaks = as.numeric(input$n_breaks),\n             xlab = input$var_select,\n             main = NULL)\n        if (input$individual_obs) {\n            rug(df[, input$var_select])\n        }\n        if (input$density) {\n            dens <- density(df[, input$var_select])\n            lines(dens, col = 'blue')\n        }\n        if (input$median) {\n            med <- median(df[, input$var_select])\n            abline(v = med, col = 'orange', lwd = 2)\n        }\n    })\n    \n    output$boxplot <- renderPlot({\n        df <- filedata()\n        if (is.null(df)) return(NULL)\n        boxplot(df[, input$var_select])\n        if (input$horizontal) {\n          boxplot(df[, input$var_select],\n                  horizontal = TRUE)\n        }\n    })\n    \n    output$barplot <- renderPlot({\n        df <- filedata()\n        if (is.null(df)) return()\n        var_freq <- table(df[, input$var_select])\n        barplot(height = var_freq,\n                ylab = 'Count')\n    })\n    \n    output$plot_selections <- renderUI({\n        df <- filedata()\n        if (is.null(df)) return()\n        if (is.null(input$chart_type)) return()\n        \n        # Depending on input$chart_type, we'll generate a \n        # different UI component for the plot options \n        # and send to the client\n        switch(input$chart_type,\n          'Histogram' = {\n              list(\n              # UI select dropdown for number of bins\n                selectInput(inputId = 'n_breaks',\n                            label = 'Bins',\n                            choices = c(5, 10, 20, 35, 50),\n                            selected = 20),\n                checkboxInput(inputId = 'median',\n                              label = 'Show median',\n                              value = FALSE),\n                checkboxInput(inputId = 'individual_obs',\n                              label = 'Show observations',\n                              value = FALSE),\n                checkboxInput(inputId = 'density',\n                              label = 'Show density',\n                              value = FALSE)\n              )\n          },\n          'Box Plot' = {\n              list(\n                  checkboxInput(inputId = 'horizontal',\n                                label = 'Horizontal',\n                                value = FALSE)\n              )\n          },\n          'Bar Plot' = {\n              list(\n                  checkboxInput(inputId = 'horizontal',\n                                label = 'Horizontal',\n                                value = FALSE)\n              )\n          }\n      )\n    })\n\n})\n\n\n",
    "created" : 1437504768274.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "819141445",
    "id" : "99630F07",
    "lastKnownWriteTime" : 1437781645,
    "path" : "~/development/shiny/eda/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}